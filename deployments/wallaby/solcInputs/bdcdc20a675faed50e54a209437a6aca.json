{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/comman/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC165, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        require(\n            owner != address(0),\n            \"ERC721: balance query for the zero address\"\n        );\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        address owner = _owners[tokenId];\n        require(\n            owner != address(0),\n            \"ERC721: owner query for nonexistent token\"\n        );\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (string memory)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721Metadata: URI query for nonexistent token\"\n        );\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (address)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: approved query for nonexistent token\"\n        );\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved)\n        public\n        virtual\n        override\n    {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator)\n        public\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isApprovedOrOwner(from, tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(\n            _isApprovedOrOwner(_msgSender(), tokenId),\n            \"ERC721: transfer caller is not owner nor approved\"\n        );\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(\n            _checkOnERC721Received(from, to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\n        internal\n        view\n        virtual\n        returns (bool)\n    {\n        require(\n            _exists(tokenId),\n            \"ERC721: operator query for nonexistent token\"\n        );\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(\n            ERC721.ownerOf(tokenId) == from,\n            \"ERC721: transfer from incorrect owner\"\n        );\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try\n                IERC721Receiver(to).onERC721Received(\n                    _msgSender(),\n                    from,\n                    tokenId,\n                    _data\n                )\n            returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\n                        \"ERC721: transfer to non ERC721Receiver implementer\"\n                    );\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "contracts/CrypticAgreement.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract CrypticAgreement is Ownable {\n    string name;\n    string cid;\n    address creator;\n    string status;\n\n    mapping(address => bool) public signed;\n    address[] members;\n    uint256 signedMembers;\n\n    constructor(\n        string memory _name,\n        string memory _cid,\n        address _creator,\n        string memory _status\n    ) {\n        name = _name;\n        cid = _cid;\n        creator = _creator;\n        status = _status;\n    }\n\n    function addMembers(address[] memory _members) public {\n        require(msg.sender == creator, \"Only owner can add members\");\n        for (uint256 i = 0; i < _members.length; i++) {\n            signed[address(_members[i])] = false;\n            members.push(_members[i]);\n        }\n    }\n\n    function checkMember(address memberAddress) internal view returns (bool) {\n        bool containsMember = false;\n        for (uint256 i = 0; i < members.length; i++) {\n            if (members[i] == memberAddress) {\n                containsMember = true;\n            }\n        }\n        return containsMember;\n    }\n\n    function signAgreement(address signer) public {\n        bool containsMember = checkMember(signer);\n        require(containsMember, \"You are not member of this agreement\");\n        require(!signed[signer], \"You have already signed agreement\");\n        signed[signer] = true;\n        signedMembers = signedMembers + 1;\n    }\n\n    function checkAgreementStatus() public view returns (string memory) {\n        if (signedMembers == members.length) {\n            return \"Signed\";\n        } else {\n            return \"Unsigned\";\n        }\n    }\n\n    function getMembers() public view returns (address[] memory) {\n        return members;\n    }\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n\n    function getCid() public view returns (string memory) {\n        return cid;\n    }\n\n    function setCid(string memory _cid) public {\n        cid = _cid;\n    }\n\n    function getOwner() public view returns (address) {\n        return creator;\n    }\n\n    function getSignedMembers() public view returns (uint256) {\n        return signedMembers;\n    }\n}\n"
    },
    "contracts/CrypticAgreementFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./CrypticAgreement.sol\";\n\ncontract CrypticAgreementFactory is Ownable {\n    mapping(address => address[]) private agreemets;\n\n    event agreementCreated(address agreement);\n\n    function createAgreement(\n        string memory name,\n        string memory cid,\n        string memory status\n    ) public returns (address) {\n        CrypticAgreement agreementContract = new CrypticAgreement(\n            name,\n            cid,\n            msg.sender,\n            status\n        );\n        agreemets[msg.sender].push(address(agreementContract));\n        emit agreementCreated(address(agreementContract));\n        return address(agreementContract);\n    }\n\n    function getAgrrements(address userAddress)\n        public\n        view\n        returns (address[] memory)\n    {\n        return agreemets[userAddress];\n    }\n}\n"
    },
    "contracts/CrypticVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./CrypticVaultToken.sol\";\n\ncontract CrypticVault is Ownable {\n    struct emergencyAlert {\n        address user;\n        string subject;\n        string message;\n    }\n\n    mapping(address => bool) private loginStatus;\n    mapping(address => mapping(address => bool)) private transferStatus;\n    mapping(address => address) private users;\n    mapping(address => string[]) private members;\n\n    mapping(address => uint256) private tokenIds;\n    mapping(address => emergencyAlert) private alerts;\n    mapping(address => string[]) private documents;\n    mapping(address => string[]) private notes;\n\n    event TokenCreated(address, address);\n    event TokenTransfered(address, address, address, uint256);\n\n    function getLoginStatus(address caller) public view returns (bool) {\n        return loginStatus[caller];\n    }\n\n    function createToken(string memory name, string memory symbol) public {\n        address _address = address(new CrypticVaultToken(name, symbol)); // Created Token contract.\n        // here add if else if conditions with argument module and store the address in their relevent variable.\n        emit TokenCreated(msg.sender, _address);\n    }\n\n    function bulkMintERC721(\n        address tokenAddress,\n        uint256 start,\n        uint256 end\n    ) public {\n        for (uint256 i = start; i < end; i++) {\n            CrypticVaultToken(tokenAddress).safeMint(msg.sender);\n        }\n        loginStatus[msg.sender] = true;\n        // Remove the next line. Will do that step in create token function.\n        users[msg.sender] = tokenAddress;\n        // Here we will also have token address to set the token Id of particular token's.\n        setTokenId(msg.sender, end - 1);\n    }\n\n    function transferToken(\n        address from,\n        address payable to,\n        address token,\n        uint256 amount\n    ) public {\n        CrypticVaultToken(token).transferTokens(from, to, token, amount);\n        transferStatus[from][to] = true;\n        emit TokenTransfered(from, to, token, amount);\n    }\n\n    function getTokenAddress(address userAddress)\n        public\n        view\n        returns (address)\n    {\n        return users[userAddress];\n    }\n\n    function storeDocuments(address userAddress, string memory cid) public {\n        documents[userAddress].push(cid);\n    }\n\n    function getDocuments(address userAddress)\n        public\n        view\n        returns (string[] memory)\n    {\n        return documents[userAddress];\n    }\n\n    function createMembers(address userAddress, string memory cid) public {\n        members[userAddress].push(cid);\n    }\n\n    function getMembers(address userAddress)\n        public\n        view\n        returns (string[] memory)\n    {\n        return members[userAddress];\n    }\n\n    function createEmergencyAlert(\n        address userAddress,\n        string memory subject,\n        string memory message\n    ) public {\n        emergencyAlert storage newAlert = alerts[userAddress];\n        newAlert.user = userAddress;\n        newAlert.subject = subject;\n        newAlert.message = message;\n    }\n\n    function getEmergencyAlert(address userAddress)\n        public\n        view\n        returns (emergencyAlert memory)\n    {\n        return alerts[userAddress];\n    }\n\n    function setTokenId(address userAddress, uint256 tokenId) public {\n        tokenIds[userAddress] = tokenId;\n    }\n\n    function getTokenId(address userAddress) public view returns (uint256) {\n        return tokenIds[userAddress];\n    }\n\n    function getTransferStatus(address adminAddress, address memberAddress)\n        public\n        view\n        returns (bool)\n    {\n        return transferStatus[adminAddress][memberAddress];\n    }\n\n    function createNotes(address userAddress, string memory cid) public {\n        notes[userAddress].push(cid);\n    }\n\n    function getNotes(address userAddress)\n        public\n        view\n        returns (string[] memory)\n    {\n        return notes[userAddress];\n    }\n\n    function findAndReplace(\n        string memory oldCid,\n        string memory newCid,\n        address userAddress\n    ) public returns (bool) {\n        for (uint256 i = 0; i < notes[userAddress].length; i++) {\n            string memory noteCid = notes[userAddress][i];\n            if (\n                keccak256(abi.encodePacked(noteCid)) ==\n                keccak256(abi.encodePacked(oldCid))\n            ) {\n                notes[userAddress][i] = newCid;\n                return true;\n            }\n        }\n        return false;\n    }\n}\n"
    },
    "contracts/CrypticVaultToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"./comman/ERC721.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\ncontract CrypticVaultToken is ERC721 {\n    using Counters for Counters.Counter;\n\n    Counters.Counter private _tokenIdCounter;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC721(_name, _symbol)\n    {}\n\n    function safeMint(address to) public {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _safeMint(to, tokenId);\n    }\n\n    function transferTokens(\n        address from,\n        address payable to,\n        address token,\n        uint256 amount\n    ) public {\n        if (token != address(0)) {\n            IERC721(token).transferFrom(from, to, amount);\n        } else {\n            require(to.send(amount), \"Transfer of ETH to receiver failed\");\n        }\n    }\n}\n"
    },
    "contracts/filecoinMockAPIs/MarketAPI.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.25 <=0.8.17;\n\nimport \"./types/MarketTypes.sol\";\n\n/// @title This contract is a proxy to the singleton Storage Market actor (address: f05). Calling one of its methods will result in a cross-actor call being performed. However, in this mock library, no actual call is performed.\n/// @author Zondax AG\n/// @dev Methods prefixed with mock_ will not be available in the real library. These methods are merely used to set mock state. Note that this interface will likely break in the future as we align it\n//       with that of the real library!\ncontract MarketAPI {\n    mapping(string => uint256) balances;\n    mapping(uint64 => MarketTypes.MockDeal) deals;\n\n    constructor() {\n        mock_generate_deals();\n    }\n\n    /// @notice Deposits the received value into the balance held in escrow.\n    /// @dev Because this is a mock method, no real balance is being deducted from the caller, nor incremented in the Storage Market actor (f05).\n    function add_balance(\n        MarketTypes.AddBalanceParams memory params\n    ) public payable {\n        balances[params.provider_or_client] += msg.value;\n    }\n\n    /// @notice Attempt to withdraw the specified amount from the balance held in escrow.\n    /// @notice If less than the specified amount is available, yields the entire available balance.\n    /// @dev This method should be called by an approved address, but the mock does not check that the caller is an approved party.\n    /// @dev Because this is a mock method, no real balance is deposited in the designated address, nor decremented from the Storage Market actor (f05).\n    function withdraw_balance(\n        MarketTypes.WithdrawBalanceParams memory params\n    ) public returns (MarketTypes.WithdrawBalanceReturn memory) {\n        uint256 tmp = balances[params.provider_or_client];\n        if (balances[params.provider_or_client] >= params.tokenAmount) {\n            balances[params.provider_or_client] -= params.tokenAmount;\n            tmp = params.tokenAmount;\n        } else {\n            balances[params.provider_or_client] = 0;\n        }\n\n        return MarketTypes.WithdrawBalanceReturn(tmp);\n    }\n\n    /// @return the escrow balance and locked amount for an address.\n    function get_balance(\n        string memory addr\n    ) public view returns (MarketTypes.GetBalanceReturn memory) {\n        uint256 actualBalance = balances[addr];\n\n        return MarketTypes.GetBalanceReturn(actualBalance, 0);\n    }\n\n    /// @return the data commitment and size of a deal proposal.\n    /// @notice This will be available after the deal is published (whether or not is is activated) and up until some undefined period after it is terminated.\n    /// @dev set data values correctly, currently returning fixed data, feel free to adjust in your local mock.\n    function get_deal_data_commitment(\n        MarketTypes.GetDealDataCommitmentParams memory params\n    ) public view returns (MarketTypes.GetDealDataCommitmentReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return\n            MarketTypes.GetDealDataCommitmentReturn(\n                bytes(\"0x111111\"),\n                deals[params.id].size\n            );\n    }\n\n    /// @return the client of a deal proposal.\n    function get_deal_client(\n        MarketTypes.GetDealClientParams memory params\n    ) public view returns (MarketTypes.GetDealClientReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return MarketTypes.GetDealClientReturn(deals[params.id].client);\n    }\n\n    /// @return the provider of a deal proposal.\n    function get_deal_provider(\n        MarketTypes.GetDealProviderParams memory params\n    ) public view returns (MarketTypes.GetDealProviderReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return MarketTypes.GetDealProviderReturn(deals[params.id].provider);\n    }\n\n    /// @return the label of a deal proposal.\n    function get_deal_label(\n        MarketTypes.GetDealLabelParams memory params\n    ) public view returns (MarketTypes.GetDealLabelReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return MarketTypes.GetDealLabelReturn(deals[params.id].label);\n    }\n\n    /// @return the start epoch and duration (in epochs) of a deal proposal.\n    function get_deal_term(\n        MarketTypes.GetDealTermParams memory params\n    ) public view returns (MarketTypes.GetDealTermReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return\n            MarketTypes.GetDealTermReturn(\n                deals[params.id].start,\n                deals[params.id].end\n            );\n    }\n\n    /// @return the per-epoch price of a deal proposal.\n    function get_deal_total_price(\n        MarketTypes.GetDealEpochPriceParams memory params\n    ) public view returns (MarketTypes.GetDealEpochPriceReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return\n            MarketTypes.GetDealEpochPriceReturn(\n                deals[params.id].price_per_epoch\n            );\n    }\n\n    /// @return the client collateral requirement for a deal proposal.\n    function get_deal_client_collateral(\n        MarketTypes.GetDealClientCollateralParams memory params\n    ) public view returns (MarketTypes.GetDealClientCollateralReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return\n            MarketTypes.GetDealClientCollateralReturn(\n                deals[params.id].client_collateral\n            );\n    }\n\n    /// @return the provider collateral requirement for a deal proposal.\n    function get_deal_provider_collateral(\n        MarketTypes.GetDealProviderCollateralParams memory params\n    ) public view returns (MarketTypes.GetDealProviderCollateralReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return\n            MarketTypes.GetDealProviderCollateralReturn(\n                deals[params.id].provider_collateral\n            );\n    }\n\n    /// @return the verified flag for a deal proposal.\n    /// @notice Note that the source of truth for verified allocations and claims is the verified registry actor.\n    function get_deal_verified(\n        MarketTypes.GetDealVerifiedParams memory params\n    ) public view returns (MarketTypes.GetDealVerifiedReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return MarketTypes.GetDealVerifiedReturn(deals[params.id].verified);\n    }\n\n    /// @notice Fetches activation state for a deal.\n    /// @notice This will be available from when the proposal is published until an undefined period after the deal finishes (either normally or by termination).\n    /// @return USR_NOT_FOUND if the deal doesn't exist (yet), or EX_DEAL_EXPIRED if the deal has been removed from state.\n    function get_deal_activation(\n        MarketTypes.GetDealActivationParams memory params\n    ) public view returns (MarketTypes.GetDealActivationReturn memory) {\n        require(deals[params.id].id > 0);\n\n        return\n            MarketTypes.GetDealActivationReturn(\n                deals[params.id].activated,\n                deals[params.id].terminated\n            );\n    }\n\n    /// @notice Publish a new set of storage deals (not yet included in a sector).\n    function publish_storage_deals(bytes memory raw_auth_params, address callee) public {\n        // calls standard filecoin receiver on message authentication api method number\n        (bool success, ) = callee.call(\n            abi.encodeWithSignature(\n                \"handle_filecoin_method(uint64,uint64,bytes)\",\n                0,\n                2643134072,\n                raw_auth_params\n            )\n        );\n        require(success, \"client contract failed to authorize deal publish\");\n    }\n\n    /// @notice Adds mock deal data to the internal state of this mock.\n    /// @dev Feel free to adjust the data here to make it align with deals in your network.\n    function mock_generate_deals() internal {\n        MarketTypes.MockDeal memory deal_67;\n        deal_67.id = 67;\n        deal_67\n            .cid = \"baga6ea4seaqlkg6mss5qs56jqtajg5ycrhpkj2b66cgdkukf2qjmmzz6ayksuci\";\n        deal_67.size = 8388608;\n        deal_67.verified = false;\n        deal_67.client = \"t01109\";\n        deal_67.provider = \"t01113\";\n        deal_67.label = \"mAXCg5AIg8YBXbFjtdBy1iZjpDYAwRSt0elGLF5GvTqulEii1VcM\";\n        deal_67.start = 25245;\n        deal_67.end = 545150;\n        deal_67.price_per_epoch = 1100000000000;\n        deal_67.provider_collateral = 0;\n        deal_67.client_collateral = 0;\n        deal_67.activated = 1;\n        deal_67.terminated = 0;\n\n        deals[deal_67.id] = deal_67;\n\n        // As EVM smart contract has a limited capacity for size (24KiB), we cannot set all deals directly here.\n        // Please, take them from docs.\n\n        // Add or replace more deals here.\n    }\n}\n"
    },
    "contracts/filecoinMockAPIs/MinerAPI.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.25 <=0.8.17;\n\nimport \"./types/MinerTypes.sol\";\n\n/// @title This contract is a proxy to a built-in Miner actor. Calling one of its methods will result in a cross-actor call being performed. However, in this mock library, no actual call is performed.\n/// @author Zondax AG\n/// @dev Methods prefixed with mock_ will not be available in the real library. These methods are merely used to set mock state. Note that this interface will likely break in the future as we align it\n//       with that of the real library!\ncontract MinerAPI {\n    string owner;\n    bool isBeneficiarySet = false;\n    CommonTypes.ActiveBeneficiary activeBeneficiary;\n    mapping(CommonTypes.SectorSize => uint64) sectorSizesBytes;\n\n    /// @notice (Mock method) Sets the owner of a Miner on contract deployment, which will be returned via get_owner().\n    constructor(string memory _owner) {\n        owner = _owner;\n\n        sectorSizesBytes[CommonTypes.SectorSize._2KiB] = 2 << 10;\n        sectorSizesBytes[CommonTypes.SectorSize._8MiB] = 8 << 20;\n        sectorSizesBytes[CommonTypes.SectorSize._512MiB] = 512 << 20;\n        sectorSizesBytes[CommonTypes.SectorSize._32GiB] = 32 << 30;\n        sectorSizesBytes[CommonTypes.SectorSize._64GiB] = 2 * (32 << 30);\n    }\n\n    /// @notice (Mock method) Sets the owner of a Miner, which will be returned via get_owner().\n    function mock_set_owner(string memory addr) public {\n        require(bytes(owner).length == 0);\n        owner = addr;\n    }\n\n    /// @notice Income and returned collateral are paid to this address\n    /// @notice This address is also allowed to change the worker address for the miner\n    /// @return the owner address of a Miner\n    function get_owner()\n        public\n        view\n        returns (MinerTypes.GetOwnerReturn memory)\n    {\n        require(bytes(owner).length != 0);\n\n        return MinerTypes.GetOwnerReturn(owner);\n    }\n\n    /// @param addr New owner address\n    /// @notice Proposes or confirms a change of owner address.\n    /// @notice If invoked by the current owner, proposes a new owner address for confirmation. If the proposed address is the current owner address, revokes any existing proposal that proposed address.\n    function change_owner_address(string memory addr) public {\n        owner = addr;\n    }\n\n    /// @param params The \"controlling\" addresses are the Owner, the Worker, and all Control Addresses.\n    /// @return Whether the provided address is \"controlling\".\n    function is_controlling_address(\n        MinerTypes.IsControllingAddressParam memory params\n    ) public pure returns (MinerTypes.IsControllingAddressReturn memory) {\n        return MinerTypes.IsControllingAddressReturn(false);\n    }\n\n    /// @return the miner's sector size.\n    function get_sector_size()\n        public\n        view\n        returns (MinerTypes.GetSectorSizeReturn memory)\n    {\n        return\n            MinerTypes.GetSectorSizeReturn(\n                sectorSizesBytes[CommonTypes.SectorSize._8MiB]\n            );\n    }\n\n    /// @notice This is calculated as actor balance - (vesting funds + pre-commit deposit + initial pledge requirement + fee debt)\n    /// @notice Can go negative if the miner is in IP debt.\n    /// @return the available balance of this miner.\n    function get_available_balance()\n        public\n        pure\n        returns (MinerTypes.GetAvailableBalanceReturn memory)\n    {\n        return MinerTypes.GetAvailableBalanceReturn(10000000000000000000000);\n    }\n\n    /// @return the funds vesting in this miner as a list of (vesting_epoch, vesting_amount) tuples.\n    function get_vesting_funds()\n        public\n        pure\n        returns (MinerTypes.GetVestingFundsReturn memory)\n    {\n        CommonTypes.VestingFunds[]\n            memory vesting_funds = new CommonTypes.VestingFunds[](1);\n        vesting_funds[0] = CommonTypes.VestingFunds(\n            1668514825,\n            2000000000000000000000\n        );\n\n        return MinerTypes.GetVestingFundsReturn(vesting_funds);\n    }\n\n    /// @notice Proposes or confirms a change of beneficiary address.\n    /// @notice A proposal must be submitted by the owner, and takes effect after approval of both the proposed beneficiary and current beneficiary, if applicable, any current beneficiary that has time and quota remaining.\n    /// @notice See FIP-0029, https://github.com/filecoin-project/FIPs/blob/master/FIPS/fip-0029.md\n    function change_beneficiary(\n        MinerTypes.ChangeBeneficiaryParams memory params\n    ) public {\n        if (!isBeneficiarySet) {\n            CommonTypes.BeneficiaryTerm memory term = CommonTypes\n                .BeneficiaryTerm(params.new_quota, 0, params.new_expiration);\n            activeBeneficiary = CommonTypes.ActiveBeneficiary(\n                params.new_beneficiary,\n                term\n            );\n            isBeneficiarySet = true;\n        } else {\n            activeBeneficiary.beneficiary = params.new_beneficiary;\n            activeBeneficiary.term.quota = params.new_quota;\n            activeBeneficiary.term.expiration = params.new_expiration;\n        }\n    }\n\n    /// @notice This method is for use by other actors (such as those acting as beneficiaries), and to abstract the state representation for clients.\n    /// @notice Retrieves the currently active and proposed beneficiary information.\n    function get_beneficiary()\n        public\n        view\n        returns (MinerTypes.GetBeneficiaryReturn memory)\n    {\n        require(isBeneficiarySet);\n\n        CommonTypes.PendingBeneficiaryChange memory proposed;\n        return MinerTypes.GetBeneficiaryReturn(activeBeneficiary, proposed);\n    }\n}\n"
    },
    "contracts/filecoinMockAPIs/types/CommonTypes.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.25 <=0.8.17;\n\n/// @title Filecoin actors' common types for Solidity.\n/// @author Zondax AG\nlibrary CommonTypes {\n    enum RegisteredSealProof {\n        StackedDRG2KiBV1,\n        StackedDRG512MiBV1,\n        StackedDRG8MiBV1,\n        StackedDRG32GiBV1,\n        StackedDRG64GiBV1,\n        StackedDRG2KiBV1P1,\n        StackedDRG512MiBV1P1,\n        StackedDRG8MiBV1P1,\n        StackedDRG32GiBV1P1,\n        StackedDRG64GiBV1P1,\n        Invalid\n    }\n\n    enum RegisteredPoStProof {\n        StackedDRGWinning2KiBV1,\n        StackedDRGWinning8MiBV1,\n        StackedDRGWinning512MiBV1,\n        StackedDRGWinning32GiBV1,\n        StackedDRGWinning64GiBV1,\n        StackedDRGWindow2KiBV1,\n        StackedDRGWindow8MiBV1,\n        StackedDRGWindow512MiBV1,\n        StackedDRGWindow32GiBV1,\n        StackedDRGWindow64GiBV1,\n        Invalid\n    }\n\n    enum RegisteredUpdateProof {\n        StackedDRG2KiBV1,\n        StackedDRG8MiBV1,\n        StackedDRG512MiBV1,\n        StackedDRG32GiBV1,\n        StackedDRG64GiBV1,\n        Invalid\n    }\n    enum ExtensionKind {\n        ExtendCommittmentLegacy,\n        ExtendCommittment\n    }\n\n    enum SectorSize {\n        _2KiB,\n        _8MiB,\n        _512MiB,\n        _32GiB,\n        _64GiB\n    }\n\n    struct ValidatedExpirationExtension {\n        uint64 deadline;\n        uint64 partition;\n        uint8 sectors;\n        int64 new_expiration;\n    }\n\n    struct ExtendExpirationsInner {\n        ValidatedExpirationExtension[] extensions;\n        bytes claims; // FIXME this is a BTreeMap<SectorNumber, (u64, u64)> on rust\n    }\n\n    struct PendingBeneficiaryChange {\n        bytes new_beneficiary;\n        int256 new_quota;\n        uint64 new_expiration;\n        bool approved_by_beneficiary;\n        bool approved_by_nominee;\n    }\n\n    struct BeneficiaryTerm {\n        int256 quota;\n        int256 used_quota;\n        uint64 expiration;\n    }\n\n    struct ActiveBeneficiary {\n        string beneficiary;\n        BeneficiaryTerm term;\n    }\n\n    struct RecoveryDeclaration {\n        uint64 deadline;\n        uint64 partition;\n        uint8 sectors;\n    }\n\n    struct FaultDeclaration {\n        uint64 deadline;\n        uint64 partition;\n        uint8 sectors;\n    }\n\n    struct TerminationDeclaration {\n        uint64 deadline;\n        uint64 partition;\n        uint8 sectors;\n    }\n\n    struct SectorClaim {\n        uint64 sector_number;\n        uint64[] maintain_claims;\n        uint64[] drop_claims;\n    }\n\n    struct ExpirationExtension2 {\n        uint64 deadline;\n        uint64 partition;\n        uint8 sectors;\n        SectorClaim[] sectors_with_claims;\n        int64 new_expiration;\n    }\n\n    struct ExpirationExtension {\n        uint64 deadline;\n        uint64 partition;\n        uint8 sectors;\n        int64 new_expiration;\n    }\n\n    struct FilterEstimate {\n        int256 position;\n        int256 velocity;\n    }\n\n    struct SectorPreCommitInfoInner {\n        RegisteredSealProof seal_proof;\n        uint64 sector_number;\n        bytes sealed_cid;\n        int64 seal_rand_epoch;\n        uint64[] deal_ids;\n        int64 expiration;\n        bytes unsealed_cid;\n    }\n\n    struct SectorPreCommitInfo {\n        RegisteredSealProof seal_proof;\n        uint64 sector_number;\n        bytes sealed_cid;\n        int64 seal_rand_epoch;\n        uint64[] deal_ids;\n        int64 expiration;\n        bytes unsealed_cid;\n    }\n    struct ReplicaUpdateInner {\n        uint64 sector_number;\n        uint64 deadline;\n        uint64 partition;\n        bytes new_sealed_cid;\n        bytes new_unsealed_cid;\n        uint64[] deals;\n        RegisteredUpdateProof update_proof_type;\n        bytes replica_proof;\n    }\n\n    struct ReplicaUpdate {\n        uint64 sector_number;\n        uint64 deadline;\n        uint64 partition;\n        bytes new_sealed_cid;\n        uint64 deals;\n        RegisteredUpdateProof update_proof_type;\n        bytes replica_proof;\n    }\n\n    struct ReplicaUpdate2 {\n        uint64 sector_number;\n        uint64 deadline;\n        uint64 partition;\n        bytes new_sealed_cid;\n        bytes new_unsealed_cid;\n        uint64 deals;\n        RegisteredUpdateProof update_proof_type;\n        bytes replica_proof;\n    }\n\n    struct PoStPartition {\n        uint64 index;\n        int8 skipped;\n    }\n\n    struct PoStProof {\n        RegisteredPoStProof post_proof;\n        bytes proof_bytes;\n    }\n\n    struct VestingFunds {\n        int64 epoch;\n        int256 amount;\n    }\n    struct SectorDeals {\n        int64 sector_type;\n        int64 sector_expiry;\n        uint64[] deal_ids;\n    }\n\n    struct Signature {\n        int8 sig_type;\n        bytes data;\n    }\n\n    struct DealProposal {\n        bytes piece_cid;\n        uint64 piece_size;\n        bool verified_deal;\n        bytes client;\n        bytes provider;\n        string label;\n        int64 start_epoch;\n        int64 end_epoch;\n        int storage_price_per_epoch;\n        int provider_collateral;\n        int client_collateral;\n    }\n\n    struct ClientDealProposal {\n        DealProposal proposal;\n        Signature client_signature;\n    }\n\n    struct SectorDealData {\n        bytes commd;\n    }\n\n    struct CID {\n        uint8 version;\n        uint64 codec;\n        Multihash hash;\n    }\n\n    struct Multihash {\n        uint64 code;\n        uint8 size;\n        bytes digest;\n    }\n\n    struct VerifiedDealInfo {\n        uint64 client;\n        uint64 allocation_id;\n        bytes data;\n        uint64 size;\n    }\n\n    struct SectorDataSpec {\n        uint64[] deal_ids;\n        int64 sector_type;\n    }\n}\n"
    },
    "contracts/filecoinMockAPIs/types/MarketTypes.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.25 <=0.8.17;\n\n/// @title Filecoin market actor types for Solidity.\n/// @author Zondax AG\nlibrary MarketTypes {\n    struct MockDeal {\n        uint64 id;\n        string cid;\n        uint64 size;\n        bool verified;\n        string client;\n        string provider;\n        string label;\n        int64 start;\n        int64 end;\n        uint256 price_per_epoch;\n        uint256 provider_collateral;\n        uint256 client_collateral;\n        int64 activated;\n        int64 terminated;\n    }\n\n    struct AddBalanceParams {\n        string provider_or_client;\n    }\n\n    struct WithdrawBalanceParams {\n        string provider_or_client;\n        uint256 tokenAmount;\n    }\n\n    struct WithdrawBalanceReturn {\n        uint256 amount_withdrawn;\n    }\n\n    struct GetBalanceReturn {\n        uint256 balance;\n        uint256 locked;\n    }\n\n    struct GetDealDataCommitmentParams {\n        uint64 id;\n    }\n\n    struct GetDealDataCommitmentReturn {\n        bytes data;\n        uint64 size;\n    }\n\n    struct GetDealClientParams {\n        uint64 id;\n    }\n\n    struct GetDealClientReturn {\n        string client;\n    }\n\n    struct GetDealProviderParams {\n        uint64 id;\n    }\n\n    struct GetDealProviderReturn {\n        string provider;\n    }\n\n    struct GetDealLabelParams {\n        uint64 id;\n    }\n\n    struct GetDealLabelReturn {\n        string label;\n    }\n\n    struct GetDealTermParams {\n        uint64 id;\n    }\n\n    struct GetDealTermReturn {\n        int64 start;\n        int64 end;\n    }\n\n    struct GetDealEpochPriceParams {\n        uint64 id;\n    }\n\n    struct GetDealEpochPriceReturn {\n        uint256 price_per_epoch;\n    }\n\n    struct GetDealClientCollateralParams {\n        uint64 id;\n    }\n\n    struct GetDealClientCollateralReturn {\n        uint256 collateral;\n    }\n\n    struct GetDealProviderCollateralParams {\n        uint64 id;\n    }\n\n    struct GetDealProviderCollateralReturn {\n        uint256 collateral;\n    }\n\n    struct GetDealVerifiedParams {\n        uint64 id;\n    }\n\n    struct GetDealVerifiedReturn {\n        bool verified;\n    }\n\n    struct GetDealActivationParams {\n        uint64 id;\n    }\n\n    struct GetDealActivationReturn {\n        int64 activated;\n        int64 terminated;\n    }\n}\n"
    },
    "contracts/filecoinMockAPIs/types/MinerTypes.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity >=0.4.25 <=0.8.17;\n\nimport \"./CommonTypes.sol\";\n\n/// @title Filecoin miner actor types for Solidity.\n/// @author Zondax AG\nlibrary MinerTypes {\n    struct GetOwnerReturn {\n        string owner;\n    }\n    struct IsControllingAddressParam {\n        string addr;\n    }\n    struct IsControllingAddressReturn {\n        bool is_controlling;\n    }\n    struct GetSectorSizeReturn {\n        uint64 sector_size;\n    }\n    struct GetAvailableBalanceReturn {\n        int256 available_balance;\n    }\n    struct GetVestingFundsReturn {\n        CommonTypes.VestingFunds[] vesting_funds;\n    }\n\n    struct ChangeBeneficiaryParams {\n        string new_beneficiary;\n        int256 new_quota;\n        uint64 new_expiration;\n    }\n\n    struct GetBeneficiaryReturn {\n        CommonTypes.ActiveBeneficiary active;\n        CommonTypes.PendingBeneficiaryChange proposed;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}